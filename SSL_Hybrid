//@version=6
indicator("SSL Hybrid", overlay=true)

// Input parameters
show_Baseline = input.bool(true, title="Show Baseline")
show_SSL1 = input.bool(false, title="Show SSL1")
show_atr = input.bool(false, title="Show ATR bands")
//ATR
atrlen = input.int(14, "ATR Period")
mult = input.float(1, "ATR Multi", step=0.1)
smoothing = input.string("WMA", title="ATR Smoothing", options=["RMA", "SMA", "EMA", "WMA"])

ma_function(source, atrlen) => 
    if smoothing == "RMA"
        ta.rma(source, atrlen)
    else if smoothing == "SMA"
        ta.sma(source, atrlen)
    else if smoothing == "EMA"
        ta.ema(source, atrlen)
    else
        ta.wma(source, atrlen)

atr_slen = ma_function(ta.tr(true), atrlen)
////ATR Up/Low Bands
upper_band = atr_slen * mult + close
lower_band = close - atr_slen * mult

////BASELINE / SSL1 / SSL2 / EXIT MOVING AVERAGE VALUES
maType = input.string("HMA", title="SSL1 / Baseline Type", options=["SMA","EMA","DEMA","TEMA","LSMA","WMA","MF","VAMA","TMA","HMA", "JMA", "Kijun v2", "EDSMA","McGinley"])
len = input.int(25, title="SSL1 / Baseline Length")

SSL2Type = input.string("JMA", title="SSL2 / Continuation Type", options=["SMA","EMA","DEMA","TEMA","WMA","MF","VAMA","TMA","HMA", "JMA","McGinley"])
len2 = input.int(5, title="SSL 2 Length")
//
SSL3Type = input.string("HMA", title="EXIT Type", options=["DEMA","TEMA","LSMA","VAMA","TMA","HMA","JMA", "Kijun v2", "McGinley", "MF"])
len3 = input.int(15, title="EXIT Length")
src = input.source(close, title="Source")

//
tema(src, len) =>
    ema1 = ta.ema(src, len)
    ema2 = ta.ema(ema1, len)
    ema3 = ta.ema(ema2, len)
    (3 * ema1) - (3 * ema2) + ema3

kidiv = input.float(1, title="Kijun MOD Divider", maxval=4)

jurik_phase = input.int(3, title="* Jurik (JMA) Only - Phase")
jurik_power = input.int(1, title="* Jurik (JMA) Only - Power")
volatility_lookback = input.int(10, title="* Volatility Adjusted (VAMA) Only - Volatility lookback length")
//MF
beta = input.float(0.8, title="Modular Filter, General Filter Only - Beta", minval=0, maxval=1, step=0.1)
feedback = input.bool(false, title="Modular Filter Only - Feedback")
z = input.float(0.5, title="Modular Filter Only - Feedback Weighting", step=0.1, minval=0, maxval=1)
//EDSMA
ssfLength = input.int(20, title="EDSMA - Super Smoother Filter Length", minval=1)
ssfPoles = input.int(2, title="EDSMA - Super Smoother Filter Poles", options=[2, 3])

//----

//EDSMA
get2PoleSSF(src, length) =>
    PI = 2 * math.asin(1)
    arg = math.sqrt(2) * PI / length
    a1 = math.exp(-arg)
    b1 = 2 * a1 * math.cos(arg)
    c2 = b1
    c3 = -math.pow(a1, 2)
    c1 = 1 - c2 - c3
    
    var float ssf = 0.0
    ssf := c1 * src + c2 * nz(ssf[1]) + c3 * nz(ssf[2])
    ssf

get3PoleSSF(src, length) =>
    PI = 2 * math.asin(1)

    arg = PI / length
    a1 = math.exp(-arg)
    b1 = 2 * a1 * math.cos(1.738 * arg)
    c1 = math.pow(a1, 2)

    coef2 = b1 + c1
    coef3 = -(c1 + b1 * c1)
    coef4 = math.pow(c1, 2)
    coef1 = 1 - coef2 - coef3 - coef4

    var float ssf = 0.0
    ssf := coef1 * src + coef2 * nz(ssf[1]) + coef3 * nz(ssf[2]) + coef4 * nz(ssf[3])
    ssf

ma(type, src, len) =>
    float result = 0
    if type=="TMA"
        result := ta.sma(ta.sma(src, math.ceil(len / 2)), math.floor(len / 2) + 1)
    else if type=="MF"
        var float ts = 0.
        var float b = 0.
        var float c = 0.
        var float os = 0.
        //----
        alpha = 2/(len+1)
        a = feedback ? z*src + (1-z)*nz(ts[1],src) : src
        //----
        b := a > alpha*a+(1-alpha)*nz(b[1],a) ? a : alpha*a+(1-alpha)*nz(b[1],a)
        c := a < alpha*a+(1-alpha)*nz(c[1],a) ? a : alpha*a+(1-alpha)*nz(c[1],a)
        os := a == b ? 1 : a == c ? 0 : os[1]
        //----
        upper = beta*b+(1-beta)*c
        lower = beta*c+(1-beta)*b 
        ts := os*upper+(1-os)*lower
        result := ts
    else if type=="LSMA"
        result := ta.linreg(src, len, 0)
    else if type=="SMA" // Simple
        result := ta.sma(src, len)
    else if type=="EMA" // Exponential
        result := ta.ema(src, len)
    else if type=="DEMA" // Double Exponential
        e = ta.ema(src, len)
        result := 2 * e - ta.ema(e, len)
    else if type=="TEMA" // Triple Exponential
        e = ta.ema(src, len)
        result := 3 * (e - ta.ema(e, len)) + ta.ema(ta.ema(e, len), len)
    else if type=="WMA" // Weighted
        result := ta.wma(src, len)
    else if type=="VAMA" // Volatility Adjusted
        /// Copyright © 2019 to present, Joris Duyck (JD)
        mid=ta.ema(src,len)
        dev=src-mid
        vol_up=ta.highest(dev,volatility_lookback)
        vol_down=ta.lowest(dev,volatility_lookback)
        result := mid+math.avg(vol_up,vol_down)
    else if type=="HMA" // Hull
        result := ta.wma(2 * ta.wma(src, len / 2) - ta.wma(src, len), math.round(math.sqrt(len)))
    else if type=="JMA" // Jurik
        /// Copyright © 2018 Alex Orekhov (everget)
        /// Copyright © 2017 Jurik Research and Consulting.
        phaseRatio = jurik_phase < -100 ? 0.5 : jurik_phase > 100 ? 2.5 : jurik_phase / 100 + 1.5
        beta_jma = 0.45 * (len - 1) / (0.45 * (len - 1) + 2)
        alpha = math.pow(beta_jma, jurik_power)
        var float jma = 0.0
        var float e0 = 0.0
        var float e1 = 0.0
        var float e2 = 0.0
        e0 := (1 - alpha) * src + alpha * nz(e0[1])
        e1 := (src - e0) * (1 - beta_jma) + beta_jma * nz(e1[1])
        e2 := (e0 + phaseRatio * e1 - nz(jma[1])) * math.pow(1 - alpha, 2) + math.pow(alpha, 2) * nz(e2[1])
        jma := e2 + nz(jma[1])
        result := jma
    else if type=="Kijun v2"
        kijun = math.avg(ta.lowest(len), ta.highest(len))//, (open + close)/2)
        conversionLine = math.avg(ta.lowest(math.round(len/kidiv)), ta.highest(math.round(len/kidiv)))
        delta = (kijun + conversionLine)/2
        result :=delta
    else if type=="McGinley"
        var float mg = 0.0
        mg := na(mg[1]) ? ta.ema(src, len) : mg[1] + (src - mg[1]) / (len * math.pow(src/mg[1], 4))
        result :=mg
    else if type=="EDSMA"
        zeros = src - nz(src[2])
        avgZeros = (zeros + zeros[1]) / 2
        
        // Ehlers Super Smoother Filter 
        ssf = ssfPoles == 2
             ? get2PoleSSF(avgZeros, ssfLength)
             : get3PoleSSF(avgZeros, ssfLength)
        
        // Rescale filter in terms of Standard Deviations
        stdev = ta.stdev(ssf, len)
        scaledFilter = stdev != 0
             ? ssf / stdev
             : 0
        
        alpha = 5 * math.abs(scaledFilter) / len
        
        var float edsma = 0.0
        edsma := alpha * src + (1 - alpha) * nz(edsma[1])
        result := edsma
    result
    
///SSL 1 and SSL2
emaHigh = ma(maType, high, len)
emaLow = ma(maType, low, len)

maHigh = ma(SSL2Type, high, len2)
maLow = ma(SSL2Type, low, len2)

///EXIT
ExitHigh = ma(SSL3Type, high, len3)
ExitLow = ma(SSL3Type, low, len3)

///Keltner Baseline Channel
BBMC = ma(maType, close, len)
useTrueRange = input.bool(true)
multy = input.float(0.2, title="Base Channel Multiplier", step=0.05)
Keltma = ma(maType, src, len)
range_T = useTrueRange ? ta.tr : high - low
rangema = ta.ema(range_T, len)
upperk = Keltma + rangema * multy
lowerk = Keltma - rangema * multy

//Baseline Violation Candle
open_pos = open*1
close_pos = close*1
difference = math.abs(close_pos-open_pos)
atr_violation = difference > atr_slen
InRange = upper_band > BBMC and lower_band < BBMC
candlesize_violation = atr_violation and InRange
plotshape(candlesize_violation, color=color.white, size=size.tiny, style=shape.diamond, location=location.top, title="Candle Size > 1xATR")

//SSL1 VALUES
var int Hlv = na
Hlv := close > emaHigh ? 1 : close < emaLow ? -1 : Hlv[1]
sslDown = Hlv < 0 ? emaHigh : emaLow

//SSL2 VALUES
var int Hlv2 = na
Hlv2 := close > maHigh ? 1 : close < maLow ? -1 : Hlv2[1]
sslDown2 = Hlv2 < 0 ? maHigh : maLow

//COLORS
show_color_bar = input.bool(false, title="Color Bars")
color_bar = close > upperk ? #00c3ff : close < lowerk ? #ff0062 : color.gray
color_ssl1 = close > sslDown ? #00c3ff : close < sslDown ? #ff0062 : na

//EXIT VALUES
var int Hlv3 = na
Hlv3 := close > ExitHigh ? 1 : close < ExitLow ? -1 : Hlv3[1]
sslExit = Hlv3 < 0 ? ExitHigh : ExitLow
is_bullish_baseline = close > upperk
is_bearish_baseline = close < lowerk
base_cross_Long = ta.crossover(close, sslExit) and is_bullish_baseline
base_cross_Short = ta.crossover(sslExit, close) and is_bearish_baseline
codiff = base_cross_Long ? 1 : base_cross_Short ? -1 : na

// SL értékek kiszámítása és megjelenítése long és short nyilaknál
sl_value_long = close - atr_slen
sl_value_short = close + atr_slen

var label sl_label_long = na
var label sl_label_short = na

if base_cross_Long
    sl_label_long := label.new(x=bar_index, y=low - atr_slen * 0.5, text="SL: " + str.tostring(sl_value_long, "#.####"), style=label.style_label_up, color=color.red, textcolor=color.white, size=size.small)

if base_cross_Short
    sl_label_short := label.new(x=bar_index, y=high + atr_slen * 0.5, text="SL: " + str.tostring(sl_value_short, "#.####"), style=label.style_label_down, color=color.red, textcolor=color.white, size=size.small)

//PLOTS
plotarrow(codiff, colorup=#00c3ff, colordown=#ff0062, title="Exit Arrows", maxheight=20, offset=0)
p1 = plot(show_Baseline ? BBMC : na, color=color_bar, linewidth=4, title='MA Baseline')
DownPlot = plot(show_SSL1 ? sslDown : na, title="SSL1", linewidth=3, color=color.new(color_ssl1, 10))
barcolor(show_color_bar ? color_bar : na)
up_channel = plot(show_Baseline ? upperk : na, color=color_bar, title="Baseline Upper Channel")
low_channel = plot(show_Baseline ? lowerk : na, color=color_bar, title="Basiline Lower Channel")
fill(up_channel, low_channel, color=color.new(color_bar, 90))

////SSL2 Continiuation from ATR
atr_crit = input.float(0.9, title="Continuation ATR Criteria", step=0.1)
upper_half = atr_slen * atr_crit + close
lower_half = close - atr_slen * atr_crit
buy_inatr = lower_half < sslDown2
sell_inatr = upper_half > sslDown2
sell_cont = close < BBMC and close < sslDown2
buy_cont = close > BBMC and close > sslDown2
sell_atr = sell_inatr and sell_cont
buy_atr = buy_inatr and buy_cont
atr_fill = buy_atr ? color.green : sell_atr ? color.purple : color.white
LongPlot = plot(sslDown2, title="SSL2", linewidth=2, color=atr_fill, style=plot.style_circles)
u = plot(show_atr ? upper_band : na, "+ATR", color=color.new(color.white, 80))
l = plot(show_atr ? lower_band : na, "-ATR", color=color.new(color.white, 80))

//ALERTS
alertcondition(ta.crossover(close, sslDown), title='SSL Cross Alert', message='SSL1 has crossed.')
alertcondition(ta.crossover(close, sslDown2), title='SSL2 Cross Alert', message='SSL2 has crossed.')
alertcondition(sell_atr, title='Sell Continuation', message='Sell Continuation.')
alertcondition(buy_atr, title='Buy Continuation', message='Buy Continuation.')
alertcondition(ta.crossover(close, sslExit), title='Exit Sell', message='Exit Sell Alert.')
alertcondition(ta.crossover(sslExit, close), title='Exit Buy', message='Exit Buy Alert.')
alertcondition(ta.crossover(close, upperk), title='Baseline Buy Entry', message='Base Buy Alert.')
alertcondition(ta.crossover(lowerk, close), title='Baseline Sell Entry', message='Base Sell Alert.')


//Table part
// Időkeretek definíciója
var timeframe5 = "5"
var timeframe15 = "15"
var timeframe30 = "30"
var timeframe1h = "60"
var timeframe4h = "240"
var timeframe1d = "D"

// Indikátor paraméterek
rsiLength = input.int(14, "RSI Periódus", minval=1)
macdFast = input.int(12, "MACD Gyors", minval=1)
macdSlow = input.int(26, "MACD Lassú", minval=1)
macdSignal = input.int(9, "MACD Jelzés", minval=1)
adxLength = input.int(14, "ADX Periódus", minval=1)

// RSI számítása különböző időkeretekben
rsi5 = request.security(syminfo.tickerid, timeframe5, ta.rsi(close, rsiLength))
rsi15 = request.security(syminfo.tickerid, timeframe15, ta.rsi(close, rsiLength))
rsi30 = request.security(syminfo.tickerid, timeframe30, ta.rsi(close, rsiLength))
rsi1h = request.security(syminfo.tickerid, timeframe1h, ta.rsi(close, rsiLength))
rsi4h = request.security(syminfo.tickerid, timeframe4h, ta.rsi(close, rsiLength))
rsi1d = request.security(syminfo.tickerid, timeframe1d, ta.rsi(close, rsiLength))

// MACD számítása különböző időkeretekben
[macd5, signal5, hist5] = request.security(syminfo.tickerid, timeframe5, ta.macd(close, macdFast, macdSlow, macdSignal))
[macd15, signal15, hist15] = request.security(syminfo.tickerid, timeframe15, ta.macd(close, macdFast, macdSlow, macdSignal))
[macd30, signal30, hist30] = request.security(syminfo.tickerid, timeframe30, ta.macd(close, macdFast, macdSlow, macdSignal))
[macd1h, signal1h, hist1h] = request.security(syminfo.tickerid, timeframe1h, ta.macd(close, macdFast, macdSlow, macdSignal))
[macd4h, signal4h, hist4h] = request.security(syminfo.tickerid, timeframe4h, ta.macd(close, macdFast, macdSlow, macdSignal))
[macd1d, signal1d, hist1d] = request.security(syminfo.tickerid, timeframe1d, ta.macd(close, macdFast, macdSlow, macdSignal))

// ADX számítása különböző időkeretekben
getDMI(len) =>
    [diplus, diminus, adx] = ta.dmi(len, len)
    adx

adx5 = request.security(syminfo.tickerid, timeframe5, getDMI(adxLength))
adx15 = request.security(syminfo.tickerid, timeframe15, getDMI(adxLength))
adx30 = request.security(syminfo.tickerid, timeframe30, getDMI(adxLength))
adx1h = request.security(syminfo.tickerid, timeframe1h, getDMI(adxLength))
adx4h = request.security(syminfo.tickerid, timeframe4h, getDMI(adxLength))
adx1d = request.security(syminfo.tickerid, timeframe1d, getDMI(adxLength))

// Stochastic RSI számítása különböző időkeretekben
stochRsi(src, length) =>
    rsiValue = ta.rsi(src, length)
    lowest = ta.lowest(rsiValue, length)
    highest = ta.highest(rsiValue, length)
    (rsiValue - lowest) / (highest - lowest) * 100

stochRsi5 = request.security(syminfo.tickerid, timeframe5, stochRsi(close, rsiLength))
stochRsi15 = request.security(syminfo.tickerid, timeframe15, stochRsi(close, rsiLength))
stochRsi30 = request.security(syminfo.tickerid, timeframe30, stochRsi(close, rsiLength))
stochRsi1h = request.security(syminfo.tickerid, timeframe1h, stochRsi(close, rsiLength))
stochRsi4h = request.security(syminfo.tickerid, timeframe4h, stochRsi(close, rsiLength))
stochRsi1d = request.security(syminfo.tickerid, timeframe1d, stochRsi(close, rsiLength))

// Színek beállítása
var color bullColor = color.green
var color bearColor = color.red
var color neutralColor = color.gray
var color tableBackgroundColor = color.new(color.black, 70)
var color tableBorderColor = color.new(color.white, 50)
var color tableHeaderColor = color.new(color.blue, 70)

// RSI szín meghatározása az érték alapján
rsiColor(rsiValue) =>
    rsiValue >= 70 ? bearColor : rsiValue <= 30 ? bullColor : neutralColor

// MACD szín meghatározása az érték alapján
macdColor(macdValue, signalValue) =>
    macdValue > signalValue ? bullColor : macdValue < signalValue ? bearColor : neutralColor

// ADX szín meghatározása az érték alapján (30 felett erős trend)
adxColor(adxValue) =>
    adxValue >= 30 ? bullColor : adxValue >= 20 ? color.orange : neutralColor

// Stochastic RSI szín meghatározása az érték alapján
stochRsiColor(stochRsiValue) =>
    stochRsiValue >= 80 ? bearColor : stochRsiValue <= 20 ? bullColor : neutralColor

// Tábla pozíció
tablePosition = input.string("bottom_right", "Tábla pozíció", options=["top_left", "top_right", "bottom_left", "bottom_right", "middle_left", "middle_right"])

// Tábla létrehozása
var table indTable = table.new(position = tablePosition, columns = 7, rows = 5, bgcolor = tableBackgroundColor, border_width = 1, border_color = tableBorderColor)

// Tábla frissítése minden tick esetén
if barstate.islast
    // Fejléc beállítása
    table.cell(indTable, 0, 0, "Indikátor", bgcolor = tableHeaderColor, text_color = color.white)
    table.cell(indTable, 1, 0, "5m", bgcolor = tableHeaderColor, text_color = color.white)
    table.cell(indTable, 2, 0, "15m", bgcolor = tableHeaderColor, text_color = color.white)
    table.cell(indTable, 3, 0, "30m", bgcolor = tableHeaderColor, text_color = color.white)
    table.cell(indTable, 4, 0, "1h", bgcolor = tableHeaderColor, text_color = color.white)
    table.cell(indTable, 5, 0, "4h", bgcolor = tableHeaderColor, text_color = color.white)
    table.cell(indTable, 6, 0, "1d", bgcolor = tableHeaderColor, text_color = color.white)
    
    // RSI értékek
    table.cell(indTable, 0, 1, "RSI (0-100)", text_color = color.white)
    table.cell(indTable, 1, 1, str.tostring(math.round(rsi5, 1)), text_color = rsiColor(rsi5))
    table.cell(indTable, 2, 1, str.tostring(math.round(rsi15, 1)), text_color = rsiColor(rsi15))
    table.cell(indTable, 3, 1, str.tostring(math.round(rsi30, 1)), text_color = rsiColor(rsi30))
    table.cell(indTable, 4, 1, str.tostring(math.round(rsi1h, 1)), text_color = rsiColor(rsi1h))
    table.cell(indTable, 5, 1, str.tostring(math.round(rsi4h, 1)), text_color = rsiColor(rsi4h))
    table.cell(indTable, 6, 1, str.tostring(math.round(rsi1d, 1)), text_color = rsiColor(rsi1d))
    
    // Stochastic RSI értékek
    table.cell(indTable, 0, 2, "Stoch RSI (0-100)", text_color = color.white)
    table.cell(indTable, 1, 2, str.tostring(math.round(stochRsi5, 1)), text_color = stochRsiColor(stochRsi5))
    table.cell(indTable, 2, 2, str.tostring(math.round(stochRsi15, 1)), text_color = stochRsiColor(stochRsi15))
    table.cell(indTable, 3, 2, str.tostring(math.round(stochRsi30, 1)), text_color = stochRsiColor(stochRsi30))
    table.cell(indTable, 4, 2, str.tostring(math.round(stochRsi1h, 1)), text_color = stochRsiColor(stochRsi1h))
    table.cell(indTable, 5, 2, str.tostring(math.round(stochRsi4h, 1)), text_color = stochRsiColor(stochRsi4h))
    table.cell(indTable, 6, 2, str.tostring(math.round(stochRsi1d, 1)), text_color = stochRsiColor(stochRsi1d))
    
    // MACD értékek
    table.cell(indTable, 0, 3, "MACD (-∞ to ∞)", text_color = color.white)
    table.cell(indTable, 1, 3, str.tostring(math.round(macd5, 3)), text_color = macdColor(macd5, signal5))
    table.cell(indTable, 2, 3, str.tostring(math.round(macd15, 3)), text_color = macdColor(macd15, signal15))
    table.cell(indTable, 3, 3, str.tostring(math.round(macd30, 3)), text_color = macdColor(macd30, signal30))
    table.cell(indTable, 4, 3, str.tostring(math.round(macd1h, 3)), text_color = macdColor(macd1h, signal1h))
    table.cell(indTable, 5, 3, str.tostring(math.round(macd4h, 3)), text_color = macdColor(macd4h, signal4h))
    table.cell(indTable, 6, 3, str.tostring(math.round(macd1d, 3)), text_color = macdColor(macd1d, signal1d))
    
    // ADX értékek
    table.cell(indTable, 0, 4, "ADX (0-100+)", text_color = color.white)
    table.cell(indTable, 1, 4, str.tostring(math.round(adx5, 1)), text_color = adxColor(adx5))
    table.cell(indTable, 2, 4, str.tostring(math.round(adx15, 1)), text_color = adxColor(adx15))
    table.cell(indTable, 3, 4, str.tostring(math.round(adx30, 1)), text_color = adxColor(adx30))
    table.cell(indTable, 4, 4, str.tostring(math.round(adx1h, 1)), text_color = adxColor(adx1h))
    table.cell(indTable, 5, 4, str.tostring(math.round(adx4h, 1)), text_color = adxColor(adx4h))
    table.cell(indTable, 6, 4, str.tostring(math.round(adx1d, 1)), text_color = adxColor(adx1d))
